##### Splitting installation into controlled parts:
## - Base container setup (all apt-get + system + ldd extension)
## - Python pip3 preparation + First batch of python tools installs
## - Tensorflow build and install (optional)
## - FFmpeg build and install
## - OpenCV build and install (using FFmpeg)
## - Additional python tools installs
## - PyTorch (+ vison + audio) build and install (using FFmpeg + OpenCV, optional)
## - Final steps: users + /iti setup, ...

# The idea is to have a base Dockerfile that will be tailored to specific builds 
# so that each build has their own final Dockerfile available for inspection

#==FROM==#
FROM ${CoreAI_FROM}

#==BOOTSTRAP_NVIDIA==#

#==CoreAI_NUMPROC==#

##### Base

# Install system packages
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update -y --fix-missing\
  && apt-get install -y \
    apt-utils \
    locales \
    wget \
    ca-certificates \
  && apt-get clean

# UTF-8
RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
ENV LANG=en_US.utf8

# Install system packages
RUN apt-get install -y \
  # Base
    build-essential \
    checkinstall \
    cmake \
    curl \
    g++ \
    gcc \
    git \
    ninja-build \
    perl \
    patchelf \
    pkg-config \
    protobuf-compiler \
    python3-dev \
    rsync \
    time \
    unzip \
    wget \
    zip \
    zlib1g \
    zlib1g-dev \
  # OpenCV
    doxygen \
    file \
    gfortran \
    gnupg \
    gstreamer1.0-plugins-good \
    imagemagick \
    libatk-adaptor \
    libatlas-base-dev \
    libboost-all-dev \
    libcanberra-gtk-module \
    libdc1394-dev \
    libeigen3-dev \
    libfaac-dev \
    libfreetype6-dev \
    libgflags-dev \
    libglew-dev \
    libglu1-mesa \
    libglu1-mesa-dev \
    libgoogle-glog-dev \
    libgphoto2-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-bad1.0-0 \
    libgstreamer-plugins-base1.0-dev \
    libgtk2.0-dev \
    libgtk-3-dev \
    libhdf5-dev \
    libhdf5-serial-dev \
    libjpeg-dev \
    liblapack-dev \
    libmp3lame-dev \
    libopenblas-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev \
    libopenjp2-7 \
    libopenjp2-7-dev \
    libopenjp2-tools \
    libopenjpip-server \
    libpng-dev \
    libpostproc-dev \
    libprotobuf-dev \
    libtbbmalloc2 \
    libtbb-dev \
    libtheora-dev \
    libtiff5-dev \
    libv4l-dev \
    libvorbis-dev \
    libwebp-dev \
    libx264-dev \
    libx265-dev \
    libxi-dev \
    libxine2-dev \
    libxmu-dev \
    libxvidcore-dev \
    libzmq3-dev \
    v4l-utils \
    x11-apps \
    x264 \
    yasm \
  #==APT_TORCH==#
  # FFMpeg (source install, do not install packages: libavcodec-dev libavformat-dev libavresample-dev libavutil-dev libswscale-dev)
    libass-dev \
    libc6 \
    libc6-dev \
    libnuma1 \
    libnuma-dev \
    libopus-dev \
    libtool \
    libvpx-dev \
  # CoreAI "user" preparation
    sudo \
    python3-venv \
  && apt-get clean

#==CoreAI_CUDA_APT==#

#==CoreAI_INSTALL_CLANG==#

#==CoreAI_BUILD==#
RUN touch /tmp/.${CoreAI_BUILD}_build

#==FIX_Misc==#

# Setup pip
ENV PIP_ROOT_USER_ACTION=ignore
RUN mv /usr/lib/python3.12/EXTERNALLY-MANAGED /usr/lib/python3.12/EXTERNALLY-MANAGED.old \
  && wget -q -O /tmp/get-pip.py --no-check-certificate https://bootstrap.pypa.io/get-pip.py \
  && python3 /tmp/get-pip.py \
  && pip3 --trusted-host pypi.org --trusted-host files.pythonhosted.org install -U pip \
  && rm -rf /tmp/get-pip.py /root/.cache/pip

#==APT_PIP_TENSORRT==#

# Install Python tools (for buiding) 
RUN pip3 --trusted-host pypi.org --trusted-host files.pythonhosted.org install -U --ignore-installed \
  # Base
    "cmake>=3.20,<4.0" \
    future \
    mkl \
    mkl-include \
    mock \
    numpy \
    opt_einsum \
    packaging \
    pyyaml \
    requests \
    setuptools \
    six \
    wheel \
  # OpenCV
    lxml \
    Pillow \
  #==PIP_TORCH==#
  # Extra
    scikit-image \
    scikit-learn \
    matplotlib \
    moviepy \
    pandas \
    mkl-static mkl-include \
  #==PIP_KERAS==#
  && rm -rf /root/.cache/pip

#==BUILD_TensorFlow==#

#==BUILD_FFMPEG==#

#==BUILD_OPENCV==#

#==BUILD_TORCH==#

##### Final steps

##### Jupyter lab & venv requirements
RUN pip3 --trusted-host pypi.org --trusted-host files.pythonhosted.org install -U jupyterlab ipywidgets \
  && jupyter labextension enable widgetsnbextension \
  && rm -rf /root/.cache/pip
# https://jupyterlab.readthedocs.io/en/stable/getting_started/changelog.html
# with v4 extensions are installed using the extension manager, see https://jupyterlab.readthedocs.io/en/stable/user/extensions.html#id11

RUN touch /.within_container
COPY withincontainer_checker.sh /tmp/withincontainer_checker.sh
RUN chmod +x /tmp/withincontainer_checker.sh \
  && /tmp/withincontainer_checker.sh

# Every sudo group user does not need a password
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Create a new group for the coreai user
RUN groupadd -g 1024 coreai \
  && groupadd -g 1025 coreaitoo

# The coreai user will have UID 1024, 
# be part of the coreai and users groups and be sudo capable (passwordless) 
RUN useradd -u 1024 -d /home/coreai -g coreai -s /bin/bash -m coreai \
    && usermod -G users coreai \
    && adduser coreai sudo
# The coreaitoo user will have UID 1025, 
RUN useradd -u 1025 -d /home/coreaitoo -g coreaitoo -s /bin/bash -m coreaitoo \
    && usermod -G users coreaitoo \
    && adduser coreaitoo sudo

# Setting up working directory 
RUN mkdir /iti \
    && chown -R coreai:coreai /iti

COPY entrypoint.sh /entrypoint.sh
COPY run_jupyter.sh /run_jupyter.sh
RUN chmod 755 /entrypoint.sh /run_jupyter.sh

EXPOSE 8888

# Switch to coreaitoo user
USER coreaitoo
WORKDIR /iti

ENTRYPOINT ["/entrypoint.sh"]
